package dev.pelsmaeker.kode

import dev.pelsmaeker.kode.utils.IntBitEnum
import dev.pelsmaeker.kode.utils.bits
import org.objectweb.asm.Opcodes.*

/**
 * Modifiers for a JVM method.
 */
@Suppress("MemberVisibilityCanBePrivate", "unused")
@JvmInline
value class JvmMethodModifiers(override val value: Int): IntBitEnum<JvmMethodModifiers> {

    init {
        require(value and mask.inv() == 0) { "Unknown values specified." }
    }

    override infix fun or(other: JvmMethodModifiers) = JvmMethodModifiers(value or other.value)

    override infix fun and(other: JvmMethodModifiers) = JvmMethodModifiers(value and other.value)

    override operator fun not(): JvmMethodModifiers = JvmMethodModifiers(value.inv() and mask)

    override operator fun iterator(): Iterator<JvmMethodModifiers> =
        value.bits().map { JvmMethodModifiers(it) }.iterator()

    override fun toString(): String =
        value.bits().joinToString(prefix = "{", postfix = "}") { names[Integer.numberOfTrailingZeros(it)]!! }

    companion object {
        /**
         * Creates a new bitwise enum from the specified members.
         *
         * @param members the members to include
         * @return the created bitwise enum
         */
        fun from(members: Iterable<JvmMethodModifiers>): JvmMethodModifiers {
            return members.fold(None) { acc, member -> acc or member }
        }

        /** All members in this enum. */
        val allMembers: List<JvmMethodModifiers> get() = members.asList().filterNotNull()

        /** No modifiers. */
        val None = JvmMethodModifiers(0)
        /** The method is accessible outside its package. */
        val Public = JvmMethodModifiers(ACC_PUBLIC)
        /** The method is accessible only within its defining class. */
        val Private = JvmMethodModifiers(ACC_PRIVATE)
        /** The method is accessible to its subclasses. */
        val Protected = JvmMethodModifiers(ACC_PROTECTED)
        /** The method is static. */
        val Static = JvmMethodModifiers(ACC_STATIC)
        /** The method cannot be overridden. */
        val Final = JvmMethodModifiers(ACC_FINAL)
        /** The method invocation is wrapped by a monitor use. */
        val Synchronized = JvmMethodModifiers(ACC_SYNCHRONIZED)
        /** The method is a bridge method generated by the compiler. */
        val Bridge = JvmMethodModifiers(ACC_BRIDGE)
        /** The method has a variable number of arguments. */
        val Varargs = JvmMethodModifiers(ACC_VARARGS)
        /** The method is implemented in a language other than Java. */
        val Native = JvmMethodModifiers(ACC_NATIVE)
        /** The method has no implementation. */
        val Abstract = JvmMethodModifiers(ACC_ABSTRACT)
        /** The method uses a strict floating-point mode. */
        val Strict = JvmMethodModifiers(ACC_STRICT)
        /** The method is not explicitly declared in the source code. */
        val Synthetic = JvmMethodModifiers(ACC_SYNTHETIC)
        /** The method was not explicitly declared in the source code but implicitly mandated by the specification. */
        val Mandated = JvmMethodModifiers(ACC_MANDATED)
        /** The method is deprecated. ASM-specific. */
        val Deprecated = JvmMethodModifiers(ACC_DEPRECATED)

        /** The members, one name for each bit position (or `null` for undefined positions). */
        private val members = arrayOf(
            Public,
            Private,
            Protected,
            Static,
            Final,
            Synchronized,
            Bridge,
            Varargs,
            Native,
            null,
            Abstract,
            Strict,
            Synthetic,
            null,
            null,
            Mandated,
            null,
            Deprecated,
        )

        /** The names of members, one name for each bit position (or `null` for undefined positions). */
        private val names = arrayOf(
            "Public",
            "Private",
            "Protected",
            "Static",
            "Final",
            "Synchronized",
            "Bridge",
            "Varargs",
            "Native",
            null,
            "Abstract",
            "Strict",
            "Synthetic",
            null,
            null,
            "Mandated",
            null,
            "Deprecated",
        )

        /** The mask, which consists of all possible bit enum members. */
        private const val mask :Int =
            // @formatter:off
            ACC_PUBLIC or
            ACC_PRIVATE or
            ACC_PROTECTED or
            ACC_STATIC or
            ACC_FINAL or
            ACC_SYNCHRONIZED or
            ACC_BRIDGE or
            ACC_VARARGS or
            ACC_NATIVE or
            // null
            ACC_ABSTRACT or
            ACC_STRICT or
            ACC_SYNTHETIC or
            // null
            // null
            ACC_MANDATED or
            // null
            ACC_DEPRECATED
            // @formatter:on

    }
}
